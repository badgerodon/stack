{
  "canonicalName": "Tracing",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/trace.append": {
          "description": "Write Trace data for a project or application"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/trace.readonly": {
          "description": "Read Trace data for a project or application"
        }
      }
    }
  },
  "rootUrl": "https://tracing.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "tracing",
  "batchPath": "batch",
  "title": "Google Tracing API",
  "ownerName": "Google",
  "resources": {
    "projects": {
      "resources": {
        "traces": {
          "methods": {
            "batchUpdate": {
              "request": {
                "$ref": "BatchUpdateSpansRequest"
              },
              "description": "Sends new spans to Stackdriver Trace or updates existing spans. If the\nname of a trace that you send matches that of an existing trace, any fields\nin the existing trace and its spans are overwritten by the provided values,\nand any new fields provided are merged with the existing trace data. If the\nname does not match, a new trace is created with given set of spans.",
              "httpMethod": "PATCH",
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "Empty"
              },
              "parameters": {
                "parent": {
                  "description": "ID of the Cloud project where the trace data is stored.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/trace.append"
              ],
              "flatPath": "v1/projects/{projectsId}/traces:batchUpdate",
              "id": "tracing.projects.traces.batchUpdate",
              "path": "v1/{+parent}/traces:batchUpdate"
            },
            "listSpans": {
              "description": "Returns a list of spans within a trace.",
              "response": {
                "$ref": "ListSpansResponse"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/trace.readonly"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "ID of the span set where is \"projects/\u003cproject_id\u003e/traces/\u003ctrace_id\u003e\".",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/traces/[^/]+$"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token identifying the page of results to return. If provided, use the\nvalue of the `page_token` field from a previous request. Optional."
                }
              },
              "flatPath": "v1/projects/{projectsId}/traces/{tracesId}:listSpans",
              "path": "v1/{+name}:listSpans",
              "id": "tracing.projects.traces.listSpans"
            },
            "list": {
              "description": "Returns of a list of traces that match the specified filter conditions.",
              "httpMethod": "GET",
              "response": {
                "$ref": "ListTracesResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/trace.readonly"
              ],
              "parameters": {
                "filter": {
                  "location": "query",
                  "description": "An optional filter for the request.\nExample:\n\"version_label_key:a some_label:some_label_key\"\nreturns traces from version a and has some_label with some_label_key.",
                  "type": "string"
                },
                "endTime": {
                  "location": "query",
                  "description": "End of the time interval (inclusive) during which the trace data was\ncollected from the application.",
                  "format": "google-datetime",
                  "type": "string"
                },
                "startTime": {
                  "location": "query",
                  "description": "Start of the time interval (inclusive) during which the trace data was\ncollected from the application.",
                  "format": "google-datetime",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token identifying the page of results to return. If provided, use the\nvalue of the `next_page_token` field from a previous request. Optional.",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "description": "Maximum number of traces to return. If not specified or \u003c= 0, the\nimplementation selects a reasonable value.  The implementation may\nreturn fewer traces than the requested page size. Optional.",
                  "format": "int32",
                  "type": "integer"
                },
                "parent": {
                  "location": "path",
                  "description": "ID of the Cloud project where the trace data is stored.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                },
                "orderBy": {
                  "description": "Field used to sort the returned traces. Optional.\nCan be one of the following:\n\n*   `trace_id`\n*   `name` (`name` field of root span in the trace)\n*   `duration` (difference between `end_time` and `start_time` fields of\n     the root span)\n*   `start` (`start_time` field of the root span)\n\nDescending order can be specified by appending `desc` to the sort field\n(for example, `name desc`).\n\nOnly one sort field is permitted.",
                  "type": "string",
                  "location": "query"
                }
              },
              "flatPath": "v1/projects/{projectsId}/traces",
              "id": "tracing.projects.traces.list",
              "path": "v1/{+parent}/traces"
            },
            "get": {
              "response": {
                "$ref": "Trace"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "ID of the trace which is \"projects/\u003cproject_id\u003e/traces/\u003ctrace_id\u003e\".",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/traces/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/trace.readonly"
              ],
              "flatPath": "v1/projects/{projectsId}/traces/{tracesId}",
              "path": "v1/{+name}",
              "id": "tracing.projects.traces.get",
              "description": "Returns a specific trace."
            }
          }
        }
      }
    }
  },
  "parameters": {
    "pp": {
      "description": "Pretty-print response.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "bearer_token": {
      "location": "query",
      "description": "OAuth bearer token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    }
  },
  "version": "v1",
  "baseUrl": "https://tracing.googleapis.com/",
  "servicePath": "",
  "description": "Send and retrieve trace data from Google Stackdriver Trace.\n",
  "kind": "discovery#restDescription",
  "basePath": "",
  "documentationLink": "https://cloud.google.com/trace",
  "revision": "20170208",
  "id": "tracing:v1",
  "discoveryVersion": "v1",
  "version_module": "True",
  "schemas": {
    "Module": {
      "type": "object",
      "properties": {
        "buildId": {
          "type": "string",
          "description": "Build_id is a unique identifier for the module,\nusually a hash of its contents"
        },
        "module": {
          "description": "Binary module.\nE.g. main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so",
          "type": "string"
        }
      },
      "id": "Module"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object",
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status"
    },
    "Span": {
      "id": "Span",
      "description": "A span represents a single operation within a trace. Spans can be nested\nand form a trace tree. Often, a trace contains a root span that describes the\nend-to-end latency and, optionally, one or more subspans for\nits sub-operations. Spans do not need to be contiguous. There may be gaps\nbetween spans in a trace.",
      "type": "object",
      "properties": {
        "localEndTime": {
          "description": "Local machine clock time from the UNIX epoch,\nat which span execution ended.\nOn the server side these are the times when the server application\nhandler finishes running.",
          "format": "google-datetime",
          "type": "string"
        },
        "parentId": {
          "description": "ID of parent span. 0 or missing if this is a root span.",
          "format": "uint64",
          "type": "string"
        },
        "timeEvents": {
          "description": "A collection of time-stamped events.",
          "type": "array",
          "items": {
            "$ref": "TimeEvent"
          }
        },
        "status": {
          "$ref": "Status",
          "description": "The final status of the Span. This is optional."
        },
        "name": {
          "description": "Name of the span. The span name is sanitized and displayed in the\nStackdriver Trace tool in the {% dynamic print site_values.console_name %}.\nThe name may be a method name or some other per-call site name.\nFor the same executable and the same call point, a best practice is\nto use a consistent name, which makes it easier to correlate\ncross-trace spans.",
          "type": "string"
        },
        "stackTrace": {
          "description": "Stack trace captured at the start of the span. This is optional.",
          "$ref": "StackTrace"
        },
        "links": {
          "description": "A collection of links.",
          "type": "array",
          "items": {
            "$ref": "Link"
          }
        },
        "attributes": {
          "additionalProperties": {
            "$ref": "AttributeValue"
          },
          "description": "Properties of a span. Attributes at the span level.\nE.g.\n\"/instance_id\": \"my-instance\"\n\"/zone\": \"us-central1-a\"\n\"/grpc/peer_address\": \"ip:port\" (dns, etc.)\n\"/grpc/deadline\": \"Duration\"\n\"/http/user_agent\"\n\"/http/request_bytes\": 300\n\"/http/response_bytes\": 1200\n\"/http/url\": google.com/apis\n\"/pid\"\n\"abc.com/myattribute\": \"my attribute value\"\n\nMaximum length for attribute key is 128 characters, for string attribute\nvalue is 2K characters.",
          "type": "object"
        },
        "id": {
          "type": "string",
          "description": "Identifier for the span. Must be a 64-bit integer other than 0 and\nunique within a trace.",
          "format": "uint64"
        },
        "localStartTime": {
          "description": "Local machine clock time from the UNIX epoch,\nat which span execution started.\nOn the server side these are the times when the server application\nhandler starts running.",
          "format": "google-datetime",
          "type": "string"
        },
        "hasRemoteParent": {
          "description": "True if this Span has a remote parent (is an RPC server Span).",
          "type": "boolean"
        }
      }
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {},
      "id": "Empty"
    },
    "ListTracesResponse": {
      "description": "The response message for the `ListTraces` method.",
      "type": "object",
      "properties": {
        "traces": {
          "description": "List of trace records returned.",
          "type": "array",
          "items": {
            "$ref": "Trace"
          }
        },
        "nextPageToken": {
          "description": "If defined, indicates that there are more traces that match the request\nand that this value should be passed to the next request to continue\nretrieving additional traces.",
          "type": "string"
        }
      },
      "id": "ListTracesResponse"
    },
    "AttributeValue": {
      "description": "Allowed attribute values.",
      "type": "object",
      "properties": {
        "stringValue": {
          "description": "A string value.",
          "type": "string"
        },
        "boolValue": {
          "type": "boolean",
          "description": "A boolean value."
        },
        "intValue": {
          "description": "An integer value.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "AttributeValue"
    },
    "BatchUpdateSpansRequest": {
      "description": "The request message for the `BatchUpdateSpans` method.",
      "type": "object",
      "properties": {
        "spanUpdates": {
          "description": "A map from trace name to spans to be stored or updated.",
          "type": "object",
          "additionalProperties": {
            "$ref": "SpanUpdates"
          }
        }
      },
      "id": "BatchUpdateSpansRequest"
    },
    "StackTrace": {
      "type": "object",
      "properties": {
        "stackFrame": {
          "description": "Stack frames of this stack trace.",
          "type": "array",
          "items": {
            "$ref": "StackFrame"
          }
        },
        "stackTraceHashId": {
          "description": "User can choose to use their own hash function to hash large attributes to\nsave network bandwidth and storage.\nTypical usage is to pass both stack_frame and stack_trace_hash_id initially\nto inform the storage of the mapping. And in subsequent calls, pass in\nstack_trace_hash_id only. User shall verify the hash value is\nsuccessfully stored.",
          "format": "uint64",
          "type": "string"
        }
      },
      "id": "StackTrace"
    },
    "TimeEvent": {
      "id": "TimeEvent",
      "description": "A time-stamped annotation in the Span.",
      "type": "object",
      "properties": {
        "networkEvent": {
          "$ref": "NetworkEvent",
          "description": "Optional field that can be used only for network events."
        },
        "annotation": {
          "description": "Optional field for user supplied \u003cstring, AttributeValue\u003e map",
          "$ref": "Annotation"
        },
        "localTime": {
          "description": "The local machine absolute timestamp when this event happened.",
          "format": "google-datetime",
          "type": "string"
        }
      }
    },
    "NetworkEvent": {
      "description": "An event describing an RPC message sent/received on the network.",
      "type": "object",
      "properties": {
        "kernelTime": {
          "description": "If available, this is the kernel time:\nFor sent messages, this is the time at which the first bit was sent.\nFor received messages, this is the time at which the last bit was\nreceived.",
          "format": "google-datetime",
          "type": "string"
        },
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "SENT",
            "RECV"
          ],
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "messageId": {
          "description": "Every message has an identifier, which must be different from all the\nnetwork messages in this span.\nThis is especially important when the request/response are streamed.",
          "format": "uint64",
          "type": "string"
        },
        "messageSize": {
          "description": "Number of bytes send/receive.",
          "format": "uint64",
          "type": "string"
        }
      },
      "id": "NetworkEvent"
    },
    "ListSpansResponse": {
      "description": "The response message for the 'ListSpans' method.",
      "type": "object",
      "properties": {
        "spans": {
          "description": "The requested spans if they are any in the specified trace.",
          "type": "array",
          "items": {
            "$ref": "Span"
          }
        },
        "nextPageToken": {
          "description": "If defined, indicates that there are more spans that match the request\nand that this value should be passed to the next request to continue\nretrieving additional spans.",
          "type": "string"
        }
      },
      "id": "ListSpansResponse"
    },
    "SpanUpdates": {
      "description": "Collection of spans.",
      "type": "object",
      "properties": {
        "spans": {
          "type": "array",
          "items": {
            "$ref": "Span"
          }
        }
      },
      "id": "SpanUpdates"
    },
    "StackFrame": {
      "description": "Presents a single stack frame in a stack trace.",
      "type": "object",
      "properties": {
        "lineNumber": {
          "description": "Line number of the frame.",
          "format": "int64",
          "type": "string"
        },
        "loadModule": {
          "$ref": "Module",
          "description": "Binary module the code is loaded from."
        },
        "columnNumber": {
          "description": "Column number is important in JavaScript(anonymous functions),\nMight not be available in some languages.",
          "format": "int64",
          "type": "string"
        },
        "fileName": {
          "description": "File name of the frame.",
          "type": "string"
        },
        "sourceVersion": {
          "description": "source_version is deployment specific. It might be\nbetter to be stored in deployment metadata.",
          "type": "string"
        },
        "originalFunctionName": {
          "description": "Used when function name is ‘mangled’. Not guaranteed to be fully\nqualified but usually it is.",
          "type": "string"
        },
        "functionName": {
          "type": "string",
          "description": "Fully qualified names which uniquely identify function/method/etc."
        }
      },
      "id": "StackFrame"
    },
    "Link": {
      "description": "Link one span with another which may be in a different Trace. Used (for\nexample) in batching operations, where a single batch handler processes\nmultiple requests from different traces.",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "TYPE_UNSPECIFIED",
            "CHILD",
            "PARENT"
          ],
          "description": "The type of the link.",
          "type": "string",
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        },
        "traceId": {
          "type": "string",
          "description": "The trace identifier of the linked span."
        },
        "spanId": {
          "description": "The span identifier of the linked span.",
          "format": "uint64",
          "type": "string"
        }
      },
      "id": "Link"
    },
    "Annotation": {
      "description": "Text annotation with a set of attributes.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A user-supplied message describing the event."
        },
        "attributes": {
          "description": "A set of attributes on the annotation.",
          "type": "object",
          "additionalProperties": {
            "$ref": "AttributeValue"
          }
        }
      },
      "id": "Annotation"
    },
    "Trace": {
      "properties": {
        "name": {
          "description": "ID of the trace which is \"projects/\u003cproject_id\u003e/traces/\u003ctrace_id\u003e\".\ntrace_id is globally unique identifier for the trace. Common to all the\nspans. It is conceptually a 128-bit hex-encoded value.",
          "type": "string"
        }
      },
      "id": "Trace",
      "description": "A trace describes how long it takes for an application to perform some\noperations. It consists of a set of spans, each of which contains details\nabout an operation with time information and operation details.",
      "type": "object"
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest"
}
